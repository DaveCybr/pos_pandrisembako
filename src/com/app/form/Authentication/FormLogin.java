/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.app.form.Authentication;

import com.app.config.ConnectionDB;
import com.app.dao.UserDAO;
import com.app.main.FormMenuUtama;
import com.app.model.ModelUser;
import com.app.service.ServiceUser;
import com.formdev.flatlaf.FlatClientProperties;
import com.formdev.flatlaf.util.UIScale;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.LayoutManager;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author queen
 */
public class FormLogin extends javax.swing.JPanel {

    private ServiceUser servis = new UserDAO();

    public FormLogin() {
        initComponents();
        setLayoutForm();
    }

    private void resetForm() {
        txtUsername.setText("");
        txtPassword.setText("");
    }

    private boolean validasiInput() {
        boolean valid = false;
        if (txtUsername.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Username tidak boleh kosong");
        } else if (txtPassword.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Password tidak boleh kosong");
        } else {
            valid = true;
        }
        return valid;
    }

    private void prosesLogin() {
        // Validasi input sebelum melanjutkan
        if (!validasiInput()) {
            JOptionPane.showMessageDialog(
                null, 
                "Harap isi Username dan Password!", 
                "Validasi Input", 
                JOptionPane.WARNING_MESSAGE
            );
            return;
        }

        // Ambil data dari form
        String user = txtUsername.getText();
        String pass = txtPassword.getText();

        // Buat model user
        ModelUser model = new ModelUser();
        model.setUsername(user);
        model.setPassword(pass);

        // Proses login menggunakan service
        ModelUser hasilLogin = servis.prosesLogin(model);

        if (hasilLogin != null) {
            // Login berhasil
            FormMenuUtama.login(hasilLogin);
            JOptionPane.showMessageDialog(
                null, 
                "Login berhasil! Selamat datang, " + hasilLogin.getNama()+ ".", 
                "Login Sukses", 
                JOptionPane.INFORMATION_MESSAGE
            );
            resetForm();
        } else {
            // Login gagal
            JOptionPane.showMessageDialog(
                null, 
                "Username atau Password salah. Silakan coba lagi.", 
                "Login Gagal", 
                JOptionPane.ERROR_MESSAGE
            );
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelLogin = new javax.swing.JPanel();
        txtUsername = new javax.swing.JTextField();
        lbUsername = new javax.swing.JLabel();
        lbTitle = new javax.swing.JLabel();
        lbPassword = new javax.swing.JLabel();
        btnLogin = new javax.swing.JButton();
        lbLogo = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();

        lbUsername.setText("Username");

        lbTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbTitle.setText("Login");

        lbPassword.setText("Password");

        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        lbLogo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/app/icon/drugstore.png"))); // NOI18N

        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLoginLayout = new javax.swing.GroupLayout(panelLogin);
        panelLogin.setLayout(panelLoginLayout);
        panelLoginLayout.setHorizontalGroup(
            panelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLoginLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLogin, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtUsername)
                    .addComponent(lbLogo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelLoginLayout.createSequentialGroup()
                        .addGroup(panelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbPassword)
                            .addComponent(lbUsername))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelLoginLayout.setVerticalGroup(
            panelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLoginLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbUsername)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(lbPassword)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnLogin)
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addComponent(panelLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(79, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addComponent(panelLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(75, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        prosesLogin();
    }//GEN-LAST:event_btnLoginActionPerformed

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPasswordActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogin;
    private javax.swing.JLabel lbLogo;
    private javax.swing.JLabel lbPassword;
    private javax.swing.JLabel lbTitle;
    private javax.swing.JLabel lbUsername;
    private javax.swing.JPanel panelLogin;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
    private void setLayoutForm () {
        setLayout(new FormLoginLayout());
        panelLogin.setLayout(new LayoutLogin());
        lbTitle.putClientProperty(FlatClientProperties.STYLE, "font:h1.font");
        panelLogin.putClientProperty(FlatClientProperties.STYLE, ""
                    + "background:$Login.background;"
                    + "arc:20;"
                    + "border:30,40,50,30;");
        txtPassword.putClientProperty(FlatClientProperties.STYLE, "" 
                    + "showRevealButton:true;" 
                    + "showCapsLock:true");
        
    }
    
    private class FormLoginLayout implements LayoutManager {

        @Override
        public void addLayoutComponent(String name, Component comp) {
            
        }

        @Override
        public void removeLayoutComponent(Component comp) {
            
        }

        @Override
        public Dimension preferredLayoutSize(Container parent) {
             synchronized (parent.getTreeLock()) {
                return new Dimension(0,0);
            }
        }

        @Override
        public Dimension minimumLayoutSize(Container parent) {
             synchronized (parent.getTreeLock()) {
                return new Dimension(0,0);
            }
        }

        @Override
        public void layoutContainer(Container parent) {
            synchronized (parent.getTreeLock()) {
                int width = parent.getWidth();
                int height = parent.getHeight();
                int loginWidth = UIScale.scale(300);
                int loginHeight = panelLogin.getPreferredSize().height;
                int x = (width - loginWidth) / 2;
                int y = (height - loginHeight) / 2;
                panelLogin.setBounds(x, y, loginWidth, loginHeight);
            }
        }
    }
    
    private class LayoutLogin implements LayoutManager {

        private final int titleGap = 10;
        private final int textGap = 10;
        private final int labelGap = 10;
        private final int buttonGap = 10;
        
        @Override
        public void addLayoutComponent(String name, Component comp) {
            throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        }

        @Override
        public void removeLayoutComponent(Component comp) {
            throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        }

        @Override
        public Dimension preferredLayoutSize(Container parent) {
           synchronized (parent.getTreeLock()) {
               Insets insets = parent.getInsets();
               int height = insets.top + insets.bottom;
               
               height += lbLogo.getPreferredSize().height;
               height += UIScale.scale(titleGap);
               height += lbTitle.getPreferredSize().height;
               height += UIScale.scale(titleGap);
               height += lbUsername.getPreferredSize().height;
               height += UIScale.scale(labelGap);
               height += txtUsername.getPreferredSize().height;
               height += UIScale.scale(textGap);
               
               height += txtPassword.getPreferredSize().height;
               height += UIScale.scale(textGap);
               height += lbPassword.getPreferredSize().height;
               height += UIScale.scale(labelGap);
               height += btnLogin.getPreferredSize().height;
               height += UIScale.scale(buttonGap);
               
               return new Dimension(0, height);
           }
        }

        @Override
        public Dimension minimumLayoutSize(Container parent) {
            throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        }

        @Override
        public void layoutContainer(Container parent) {
            synchronized (parent.getTreeLock()) {
                Insets insets = parent.getInsets();
                int x = insets.left;
                int y = insets.top;
                int width = parent.getWidth() - (insets.left + insets.right);

                // Layout lbLogo
                lbLogo.setBounds(x, y, width, lbLogo.getPreferredSize().height);
                y += lbLogo.getPreferredSize().height + UIScale.scale(titleGap);

                // Layout lbTitle
                lbTitle.setBounds(x, y, width, lbTitle.getPreferredSize().height);
                y += lbTitle.getPreferredSize().height + UIScale.scale(titleGap);

                // Layout lbUsername
                lbUsername.setBounds(x, y, width, lbUsername.getPreferredSize().height);
                y += lbUsername.getPreferredSize().height + UIScale.scale(labelGap);

                // Layout txtUsername
                txtUsername.setBounds(x, y, width, txtUsername.getPreferredSize().height);
                y += txtUsername.getPreferredSize().height + UIScale.scale(textGap);

                // Layout lbPassword
                lbPassword.setBounds(x, y, width, lbPassword.getPreferredSize().height);
                y += lbPassword.getPreferredSize().height + UIScale.scale(labelGap);

                // Layout txtPassword
                txtPassword.setBounds(x, y, width, txtPassword.getPreferredSize().height);
                y += txtPassword.getPreferredSize().height + UIScale.scale(buttonGap);

                // Layout btnLogin
                btnLogin.setBounds(x, y, width, btnLogin.getPreferredSize().height);
            }
        }
        
    }
    
    
}
